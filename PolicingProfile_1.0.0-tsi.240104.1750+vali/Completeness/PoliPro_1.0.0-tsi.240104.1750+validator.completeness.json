{
	"info": {
		"_postman_id": "6199808e-c0a7-4035-b5c0-d60ad5e7bb7c",
		"name": "PolicingProfile_1.0.0-tsi.240104.1750+validator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9715086"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== PolicingProfile_1.0.0-tsi.240104.1750+validator ====================================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // uuid of the object that is to be validated\r",
									"    // localId of the object that is to be validated\r",
									"    // kindOfReference : 'dynamic' for testing against implementations, 'static' for testing against simulators\r",
									"    // suffixUrlEncodingIsRequired : e.g. Mockoon requires the suffix being url encoded, but applications vice versa\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "PolicingProfile",
					"item": [
						{
							"name": "profile-collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var policingProfileUuid = \"\";\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            let profileName;\r",
											"            profileName = \"policing-profile-1-0:PROFILE_NAME_TYPE_POLICING_PROFILE\";\r",
											"            policingProfileUuid = FindUuidForProfileType(responseObject, profileName);\r",
											"\r",
											"        } else {\r",
											"            pm.test(\"List of Profile instances could be loaded\", function () {\r",
											"                pm.expect(false).to.be.true\r",
											"            });\r",
											"            logger.log(\"FAIL: List of Profile instances could not be loaded\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"        if ( policingProfileUuid != \"\" ) {\r",
											"            logger.log(\"  - policingProfileUuid: \" + policingProfileUuid)\r",
											"        } else {\r",
											"            logger.log(\"  - No instance of PolicingProfile found\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"policingProfileUuid\", policingProfileUuid);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function FindUuidForProfileType(responseObject, searchedProfileType) {\r",
											"    for(let i=0; i<responseObject[\"core-model-1-4:profile-collection\"][\"profile\"].length; i++) {\r",
											"        let profileName;\r",
											"        try {\r",
											"            profileName = responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"profile-name\"]\r",
											"        } catch (error) {\r",
											"            profileName = \"\"\r",
											"        }\r",
											"        if( profileName == searchedProfileType ) {\r",
											"            return responseObject[\"core-model-1-4:profile-collection\"][\"profile\"][i][\"uuid\"]\r",
											"        }\r",
											"    }\r",
											"    return \"\"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ProfileCollection ===================================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"?fields=profile(uuid;profile-name)\";\r",
											"    filters = UrlEncodeFieldsFilterString(filters);\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/profile-collection\";\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( mountName != \"\" ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters;\r",
											"\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeFieldsFilterString(filters) {\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \"(\", \"%28\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \")\", \"%29\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \":\", \"%3A\");\r",
											"    filters = ReplaceSubstringByNewstringInInputstring(filters, \";\", \"%3B\");\r",
											"    return filters\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "policing-profile-capability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var policingProfileCapability = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            policingProfileCapability = responseObject[\"policing-profile-1-0:policing-profile-capability\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"policing-profile-1-0:policing-profile-capability\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"policing-profile-1-0:policing-profile-capability\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"profile-naming-is-avail\",\r",
											"                    \"supported-marker-mode-list\",\r",
											"                    \"supported-policer-kind-list\",\r",
											"                    \"information-rate-min\",\r",
											"                    \"information-rate-max\",\r",
											"                    \"burst-size-min\",\r",
											"                    \"burst-size-max\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"profile-naming-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"supported-marker-mode-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"minItems\": 1,\r",
											"                        \"items\": {\r",
											"                            \"type\": \"string\",\r",
											"                            \"enum\": [\r",
											"                                \"policing-profile-1-0:MARKER_MODE_TYPE_COLOR_BLIND\",\r",
											"                                \"policing-profile-1-0:MARKER_MODE_TYPE_COLOR_AWARE\",\r",
											"                                \"policing-profile-1-0:MARKER_MODE_TYPE_NOT_YET_DEFINED\"\r",
											"                            ]\r",
											"                        }\r",
											"                    },\r",
											"                    \"supported-policer-kind-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"minItems\": 1,\r",
											"                        \"items\": {\r",
											"                            \"type\": \"string\",\r",
											"                            \"enum\": [\r",
											"                                \"policing-profile-1-0:POLICER_KIND_TYPE_SINGLE_RATE_THREE_COLOR\",\r",
											"                                \"policing-profile-1-0:POLICER_KIND_TYPE_TWO_RATE_THREE_COLOR\",\r",
											"                                \"policing-profile-1-0:POLICER_KIND_TYPE_NOT_YET_DEFINED\"\r",
											"                            ]\r",
											"                        }\r",
											"                    },\r",
											"                    \"information-rate-min\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"information-rate-max\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"burst-size-min\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int16\"\r",
											"                    },\r",
											"                    \"burst-size-max\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int16\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"PolicingProfileCapability could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: PolicingProfileCapability could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: PolicingProfileCapability could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"policingProfileCapability\", policingProfileCapability)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== PolicingProfileCapability ===========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var policingProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    policingProfileUuid = pm.collectionVariables.get(\"policingProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/policing-profile-1-0:policing-profile-pac/policing-profile-capability\";\r",
											"    uuid = policingProfileUuid;\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (policingProfileUuid!=\"\") && (policingProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "policing-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var policingProfileConfiguration = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            policingProfileConfiguration = responseObject[\"policing-profile-1-0:policing-profile-configuration\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"policing-profile-1-0:policing-profile-configuration\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"policing-profile-1-0:policing-profile-configuration\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"external-label\",\r",
											"                    \"marker-mode\",\r",
											"                    \"policer-kind\",\r",
											"                    \"committed-information-rate\",\r",
											"                    \"committed-burst-size\",\r",
											"                    \"excess-burst-size\",\r",
											"                    \"peak-information-rate\",\r",
											"                    \"peak-burst-size\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"external-label\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"marker-mode\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"enum\": [\r",
											"                            \"policing-profile-1-0:MARKER_MODE_TYPE_COLOR_BLIND\",\r",
											"                            \"policing-profile-1-0:MARKER_MODE_TYPE_COLOR_AWARE\",\r",
											"                            \"policing-profile-1-0:MARKER_MODE_TYPE_NOT_YET_DEFINED\"\r",
											"                        ]\r",
											"                    },\r",
											"                    \"policer-kind\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"enum\": [\r",
											"                            \"policing-profile-1-0:POLICER_KIND_TYPE_SINGLE_RATE_THREE_COLOR\",\r",
											"                            \"policing-profile-1-0:POLICER_KIND_TYPE_TWO_RATE_THREE_COLOR\",\r",
											"                            \"policing-profile-1-0:POLICER_KIND_TYPE_NOT_YET_DEFINED\"\r",
											"                        ]\r",
											"                    },\r",
											"                    \"committed-information-rate\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"committed-burst-size\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"excess-burst-size\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"peak-information-rate\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"peak-burst-size\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"PolicingProfileConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: PolicingProfileConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: PolicingProfileConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"policingProfileConfiguration\", policingProfileConfiguration)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== PolicingProfileConfiguration ========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var policingProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    policingProfileUuid = pm.collectionVariables.get(\"policingProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/policing-profile-1-0:policing-profile-pac/policing-profile-configuration\";\r",
											"    uuid = policingProfileUuid;\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (policingProfileUuid!=\"\") && (policingProfileUuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create-policing-profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== CreatePolicingProfile ===============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var policingProfileCapability = {};\r",
											"var profileNamingIsAvail = false;\r",
											"var supportedMarkerModeList = [];\r",
											"var supportedPolicerKindList = [];\r",
											"var informationRateMin = 0;\r",
											"var informationRateMax = 0;\r",
											"var burstSizeMin = 0;\r",
											"var burstSizeMax = 0;\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    policingProfileCapability = pm.collectionVariables.get(\"policingProfileCapability\");\r",
											"    profileNamingIsAvail = policingProfileCapability[\"profile-naming-is-avail\"];\r",
											"    supportedMarkerModeList = policingProfileCapability[\"supported-marker-mode-list\"];\r",
											"    supportedPolicerKindList = policingProfileCapability[\"supported-policer-kind-list\"];\r",
											"    informationRateMin = policingProfileCapability[\"information-rate-min\"];\r",
											"    informationRateMax = policingProfileCapability[\"information-rate-max\"];\r",
											"    burstSizeMin = policingProfileCapability[\"burst-size-min\"];\r",
											"    burstSizeMax = policingProfileCapability[\"burst-size-max\"]\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var externalLabel = \"\";\r",
											"var markerMode = \"\";\r",
											"var policerKind = \"\";\r",
											"var committedInformationRate = 0;\r",
											"var committedBurstSize = 0;\r",
											"var excessBurstSize = 0;\r",
											"var peakInformationRate = 0;\r",
											"var peakBurstSize = 0;\r",
											"\r",
											"try {\r",
											"    if ( (policingProfileCapability!=undefined) && (Object.keys(policingProfileCapability).length!=0) ) {\r",
											"        switch (collectionInfo.kindOfReference) {\r",
											"            case \"dynamic\":\r",
											"                if ( profileNamingIsAvail == true ) {\r",
											"                   externalLabel = \"createdLabel\"\r",
											"                };\r",
											"                if ( supportedMarkerModeList.length > 0 ) {\r",
											"                    let randomInteger;\r",
											"                    randomInteger = Math.floor(Math.random() * supportedMarkerModeList.length);\r",
											"                    markerMode = supportedMarkerModeList[randomInteger]\r",
											"                };\r",
											"                if ( supportedPolicerKindList.length > 0 ) {\r",
											"                    let randomInteger;\r",
											"                    randomInteger = Math.floor(Math.random() * supportedPolicerKindList.length);\r",
											"                    policerKind = supportedPolicerKindList[randomInteger]\r",
											"                };\r",
											"                if ( (informationRateMin!=-1) && (informationRateMax!=-1) ) {\r",
											"                    committedInformationRate = Math.floor( informationRateMin + (informationRateMax-informationRateMin)*0.2*Math.random() );\r",
											"                };\r",
											"                if ( burstSizeMin != -1 ) {\r",
											"                    committedBurstSize = burstSizeMin;\r",
											"                };\r",
											"                if ( (burstSizeMin!=-1) && (burstSizeMax!=-1) ) {\r",
											"                    excessBurstSize = Math.floor( burstSizeMin + (burstSizeMax-burstSizeMin)*0.2*Math.random() );\r",
											"                };\r",
											"                if ( (informationRateMin!=-1) && (informationRateMax!=-1) ) {\r",
											"                    peakInformationRate = Math.floor( informationRateMax - (informationRateMax-informationRateMin)*0.5*Math.random() );\r",
											"                };\r",
											"                if ( (burstSizeMin!=-1) && (burstSizeMax!=-1) ) {\r",
											"                    peakBurstSize = Math.floor( burstSizeMax - (burstSizeMax-burstSizeMin)*0.5*Math.random() );\r",
											"                };\r",
											"                break;\r",
											"\r",
											"            case \"static\":\r",
											"                externalLabel = \"createdLabel\";\r",
											"                markerMode = \"policing-profile-1-0:MARKER_MODE_TYPE_COLOR_BLIND\";\r",
											"                policerKind = \"policing-profile-1-0:POLICER_KIND_TYPE_SINGLE_RATE_THREE_COLOR\";\r",
											"                committedInformationRate = 10000;\r",
											"                committedBurstSize = 256;\r",
											"                excessBurstSize = 512;\r",
											"                peakInformationRate = 100000;\r",
											"                peakBurstSize = 512;\r",
											"                break;\r",
											"\r",
											"            default:\r",
											"                logger.warn(\"Kind of reference (static/dynamic) unknown.\")\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Random body could not be created.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let createdConfiguration = {};\r",
											"    createdConfiguration.externalLabel = externalLabel;\r",
											"    createdConfiguration.markerMode = markerMode;\r",
											"    createdConfiguration.policerKind = policerKind;\r",
											"    createdConfiguration.committedInformationRate = committedInformationRate;\r",
											"    createdConfiguration.committedBurstSize = committedBurstSize;\r",
											"    createdConfiguration.excessBurstSize = excessBurstSize;\r",
											"    createdConfiguration.peakInformationRate = peakInformationRate;\r",
											"    createdConfiguration.peakBurstSize = peakBurstSize;\r",
											"\r",
											"    pm.collectionVariables.set(\"createdConfiguration\", createdConfiguration)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/policing-profile-1-0:create-policing-profile\";\r",
											"    if (collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    let thereWasAnExistingInstance = false;\r",
											"    thereWasAnExistingInstance = (policingProfileCapability!=undefined) && (Object.keys(policingProfileCapability).length!=0);\r",
											"    if ( (mountName!=\"\") && thereWasAnExistingInstance ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"external-label\": \"' + externalLabel + '\", '\r",
											"        +           '\"marker-mode\": \"' + markerMode + '\", '\r",
											"        +           '\"policer-kind\": \"' + policerKind + '\", '\r",
											"        +           '\"committed-information-rate\": \"' + committedInformationRate + '\", '\r",
											"        +           '\"committed-burst-size\": \"' + committedBurstSize + '\", '\r",
											"        +           '\"excess-burst-size\": \"' + excessBurstSize + '\", '\r",
											"        +           '\"peak-information-rate\": \"' + peakInformationRate + '\", '\r",
											"        +           '\"peak-burst-size\": \"' + peakBurstSize + '\"'\r",
											"        +       ' }'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"        let subStringToBeReplaced = \"{uuid}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + uuid + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"        let subStringToBeReplaced = \"{localId}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + localId + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"    let subStringToBeReplaced = \"{mountName}\";\r",
											"    let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"    let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"    let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"    path = precedingSubString + mountName + subsequentSubString;\r",
											"    return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i=0; i<serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for (let i=0; i<collectionInputList.length; i++) {\r",
											"            if (collectionInputList[i].collectionName == searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var createdPolicingProfileUuid = \"\";\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            createdPolicingProfileUuid = responseObject[\"policing-profile-1-0:output\"][\"created-policing-profile\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"policing-profile-1-0:output\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"policing-profile-1-0:output\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"created-policing-profile\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"created-policing-profile\": {\r",
											"                        \"type\": \"string\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"CreatePolicingProfile RPC responded 200\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: CreatePolicingProfile RPC responded 200\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: ResponseCode of CreatePolicingProfile RPC responded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"createdPolicingProfileUuid\", createdPolicingProfileUuid);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "policing-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var createdConfiguration;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    createdConfiguration = pm.collectionVariables.get(\"createdConfiguration\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var readConfiguration = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            readConfiguration = responseObject[\"policing-profile-1-0:policing-profile-configuration\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"Created PolicingProfile could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: Created PolicingProfile could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: Created PolicingProfile could be loaded, \" + responseCode + \" instead of 200\")\r",
											"        };\r",
											"\r",
											"        logger.debug(\"externalLabel: \"\r",
											"                            + createdConfiguration.externalLabel\r",
											"                            + \" / \" + readConfiguration[\"external-label\"]);\r",
											"        logger.debug(\"markerMode: \"\r",
											"                            + createdConfiguration.markerMode\r",
											"                            + \" / \" + readConfiguration[\"marker-mode\"]);\r",
											"        logger.debug(\"policerKind: \"\r",
											"                            + createdConfiguration.policerKind\r",
											"                            + \" / \" + readConfiguration[\"policer-kind\"]);\r",
											"        logger.debug(\"committedInformationRate: \"\r",
											"                            + createdConfiguration.committedInformationRate\r",
											"                            + \" / \" + readConfiguration[\"committed-information-rate\"]);\r",
											"        logger.debug(\"committedBurstSize: \"\r",
											"                            + createdConfiguration.committedBurstSize\r",
											"                            + \" / \" + readConfiguration[\"committed-burst-size\"]);\r",
											"        logger.debug(\"excessBurstSize: \"\r",
											"                            + createdConfiguration.excessBurstSize\r",
											"                            + \" / \" + readConfiguration[\"excess-burst-size\"]);\r",
											"        logger.debug(\"peakInformationRate: \"\r",
											"                            + createdConfiguration.peakInformationRate\r",
											"                            + \" / \" + readConfiguration[\"peak-information-rate\"]);\r",
											"        logger.debug(\"peakBurstSize: \"\r",
											"                            + createdConfiguration.peakBurstSize\r",
											"                            + \" / \" + readConfiguration[\"peak-burst-size\"]);\r",
											"        let createdIsIdenticalWithRead = false;\r",
											"        if ( (Object.keys(createdConfiguration).length!=0) && (Object.keys(readConfiguration).length!=0) ) {\r",
											"            if ( Object.keys(createdConfiguration).length == Object.keys(readConfiguration).length ) {\r",
											"                if ( ( (createdConfiguration.externalLabel==readConfiguration[\"external-label\"])\r",
											"                                || (readConfiguration[\"external-label\"]==\"External label not yet defined.\") )\r",
											"                        && ( (createdConfiguration.markerMode==readConfiguration[\"marker-mode\"])\r",
											"                                || (readConfiguration[\"marker-mode\"]==\"policing-profile-1-0:MARKER_MODE_TYPE_NOT_YET_DEFINED\") )\r",
											"                        && ( (createdConfiguration.policerKind==readConfiguration[\"policer-kind\"])\r",
											"                                || (readConfiguration[\"policer-kind\"]==\"policing-profile-1-0:POLICER_KIND_TYPE_NOT_YET_DEFINED\") )\r",
											"                        && ( (parseInt(createdConfiguration.committedInformationRate)==readConfiguration[\"committed-information-rate\"])\r",
											"                                || (readConfiguration[\"committed-information-rate\"]==\"-1\") )\r",
											"                        && ( (parseInt(createdConfiguration.committedBurstSize)==readConfiguration[\"committed-burst-size\"])\r",
											"                                || (readConfiguration[\"committed-burst-size\"]==\"-1\") )\r",
											"                        && ( (parseInt(createdConfiguration.excessBurstSize)==readConfiguration[\"excess-burst-size\"])\r",
											"                                || (readConfiguration[\"excess-burst-size\"]==\"-1\") )\r",
											"                        && ( (parseInt(createdConfiguration.peakInformationRate)==readConfiguration[\"peak-information-rate\"])\r",
											"                                || (readConfiguration[\"peak-information-rate\"]==\"-1\") )\r",
											"                        && ( (parseInt(createdConfiguration.peakBurstSize)==readConfiguration[\"peak-burst-size\"])\r",
											"                                || (readConfiguration[\"peak-burst-size\"]==\"-1\") ) ) {\r",
											"                    createdIsIdenticalWithRead = true\r",
											"                } else {\r",
											"                    createdIsIdenticalWithRead = false\r",
											"                }\r",
											"            }\r",
											"        };\r",
											"        pm.test(\"New PolicingProfile has the correct values\", function () {\r",
											"            pm.expect(createdIsIdenticalWithRead).to.be.true\r",
											"        });\r",
											"        if ( createdIsIdenticalWithRead == true ) {\r",
											"            logger.log(\"  - ok: New PolicingProfile has the correct values\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: New PolicingProfile does not have the correct values\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== PolicingProfileConfiguration ========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdPolicingProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdPolicingProfileUuid = pm.collectionVariables.get(\"createdPolicingProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/policing-profile-1-0:policing-profile-pac/policing-profile-configuration\";\r",
											"    if ((createdPolicingProfileUuid != \"\") && (createdPolicingProfileUuid != undefined)) {\r",
											"        uuid = createdPolicingProfileUuid;\r",
											"        if ( collectionInfo.serverToBeApplied.includes(\"simulator\") ) uuid+=\"a\"\r",
											"    };\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ((mountName != \"\") && (createdPolicingProfileUuid != \"\") && (createdPolicingProfileUuid != undefined)) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ((uuid != undefined) && (uuid != null) && (uuid != \"\")) {\r",
											"        let subStringToBeReplaced = \"{uuid}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + uuid + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ((localId != undefined) && (localId != null) && (localId != \"\")) {\r",
											"        let subStringToBeReplaced = \"{localId}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + localId + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"    let subStringToBeReplaced = \"{mountName}\";\r",
											"    let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"    let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"    let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"    path = precedingSubString + mountName + subsequentSubString;\r",
											"    return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for (let i = 0; i < collectionInputList.length; i++) {\r",
											"            if (collectionInputList[i].collectionName == searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "modify-policing-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code)\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"ModifyPolicingProfile RPC responded 204\", function () {\r",
											"            pm.expect(responseCode).to.equal(204)\r",
											"        });\r",
											"        if ( responseCode == 204 ) {\r",
											"            logger.log(\"  - ok: ModifyPolicingProfile RPC responded 204\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: ModifyPolicingProfile RPC responded \" + responseCode + \" instead of 204\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ModifyPolicingProfile ===============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var policingProfileCapability = {};\r",
											"var profileNamingIsAvail = false;\r",
											"var supportedMarkerModeList = [];\r",
											"var supportedPolicerKindList = [];\r",
											"var informationRateMin = 0;\r",
											"var informationRateMax = 0;\r",
											"var burstSizeMin = 0;\r",
											"var burstSizeMax = 0;\r",
											"var createdPolicingProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    policingProfileCapability = pm.collectionVariables.get(\"policingProfileCapability\");\r",
											"    profileNamingIsAvail = policingProfileCapability[\"profile-naming-is-avail\"];\r",
											"    supportedMarkerModeList = policingProfileCapability[\"supported-marker-mode-list\"];\r",
											"    supportedPolicerKindList = policingProfileCapability[\"supported-policer-kind-list\"];\r",
											"    informationRateMin = policingProfileCapability[\"information-rate-min\"];\r",
											"    informationRateMax = policingProfileCapability[\"information-rate-max\"];\r",
											"    burstSizeMin = policingProfileCapability[\"burst-size-min\"];\r",
											"    burstSizeMax = policingProfileCapability[\"burst-size-max\"];\r",
											"\r",
											"    createdPolicingProfileUuid = pm.collectionVariables.get(\"createdPolicingProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var externalLabel = \"\";\r",
											"var markerMode = \"\";\r",
											"var policerKind = \"\";\r",
											"var committedInformationRate = 0;\r",
											"var committedBurstSize = 0;\r",
											"var excessBurstSize = 0;\r",
											"var peakInformationRate = 0;\r",
											"var peakBurstSize = 0;\r",
											"try {\r",
											"    if ( (policingProfileCapability!=undefined) && (Object.keys(policingProfileCapability).length!=0) ) {\r",
											"        switch (collectionInfo.kindOfReference) {\r",
											"            case \"dynamic\":\r",
											"                if ( profileNamingIsAvail == true ) {\r",
											"                   externalLabel = \"modifiedLabel\"\r",
											"                };\r",
											"                if ( supportedMarkerModeList.length > 0 ) {\r",
											"                    let randomInteger;\r",
											"                    randomInteger = Math.floor(Math.random() * supportedMarkerModeList.length);\r",
											"                    markerMode = supportedMarkerModeList[randomInteger]\r",
											"                };\r",
											"                if ( supportedPolicerKindList.length > 0 ) {\r",
											"                    let randomInteger;\r",
											"                    randomInteger = Math.floor(Math.random() * supportedPolicerKindList.length);\r",
											"                    policerKind = supportedPolicerKindList[randomInteger]\r",
											"                };\r",
											"                if ( (informationRateMin!=-1) && (informationRateMax!=-1) ) {\r",
											"                    committedInformationRate = Math.floor( informationRateMin + (informationRateMax-informationRateMin)*0.2*Math.random() );\r",
											"                };\r",
											"                if ( burstSizeMin != -1 ) {\r",
											"                    committedBurstSize = burstSizeMin;\r",
											"                };\r",
											"                if ( (burstSizeMin!=-1) && (burstSizeMax!=-1) ) {\r",
											"                    excessBurstSize = Math.floor( burstSizeMin + (burstSizeMax-burstSizeMin)*0.2*Math.random() );\r",
											"                };\r",
											"                if ( (informationRateMin!=-1) && (informationRateMax!=-1) ) {\r",
											"                    peakInformationRate = Math.floor( informationRateMax - (informationRateMax-informationRateMin)*0.5*Math.random() );\r",
											"                };\r",
											"                if ( (burstSizeMin!=-1) && (burstSizeMax!=-1) ) {\r",
											"                    peakBurstSize = Math.floor( burstSizeMax - (burstSizeMax-burstSizeMin)*0.5*Math.random() );\r",
											"                };\r",
											"                break;\r",
											"\r",
											"            case \"static\":\r",
											"                externalLabel = \"modifiedLabel\";\r",
											"                markerMode = \"policing-profile-1-0:MARKER_MODE_TYPE_COLOR_BLIND\";\r",
											"                policerKind = \"policing-profile-1-0:POLICER_KIND_TYPE_SINGLE_RATE_THREE_COLOR\";\r",
											"                committedInformationRate = 9999;\r",
											"                committedBurstSize = 128;\r",
											"                excessBurstSize = 256;\r",
											"                peakInformationRate = 99999;\r",
											"                peakBurstSize = 256;\r",
											"                break;\r",
											"\r",
											"            default:\r",
											"                logger.warn(\"Kind of reference (static/dynamic) unknown.\")\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Random body could not be created.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let modifiedConfiguration = {};\r",
											"    modifiedConfiguration.externalLabel = externalLabel;\r",
											"    modifiedConfiguration.markerMode = markerMode;\r",
											"    modifiedConfiguration.policerKind = policerKind;\r",
											"    modifiedConfiguration.committedInformationRate = committedInformationRate;\r",
											"    modifiedConfiguration.committedBurstSize = committedBurstSize;\r",
											"    modifiedConfiguration.excessBurstSize = excessBurstSize;\r",
											"    modifiedConfiguration.peakInformationRate = peakInformationRate;\r",
											"    modifiedConfiguration.peakBurstSize = peakBurstSize;\r",
											"\r",
											"    pm.collectionVariables.set(\"modifiedConfiguration\", modifiedConfiguration)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/policing-profile-1-0:modify-policing-profile\";\r",
											"    if (collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    let thereWasAnExistingInstance = false;\r",
											"    thereWasAnExistingInstance = (policingProfileCapability!=undefined) && (Object.keys(policingProfileCapability).length!=0);\r",
											"    let aNewInstanceCouldBeCreated = false;\r",
											"    aNewInstanceCouldBeCreated = (createdPolicingProfileUuid!=undefined) && (createdPolicingProfileUuid!=\"\");\r",
											"    if ( (mountName!=\"\") && thereWasAnExistingInstance && aNewInstanceCouldBeCreated ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"policing-profile-to-be-modified\": \"' + createdPolicingProfileUuid + '\", '\r",
											"        +           '\"external-label\": \"' + externalLabel + '\", '\r",
											"        +           '\"marker-mode\": \"' + markerMode + '\", '\r",
											"        +           '\"policer-kind\": \"' + policerKind + '\", '\r",
											"        +           '\"committed-information-rate\": \"' + committedInformationRate + '\", '\r",
											"        +           '\"committed-burst-size\": \"' + committedBurstSize + '\", '\r",
											"        +           '\"excess-burst-size\": \"' + excessBurstSize + '\", '\r",
											"        +           '\"peak-information-rate\": \"' + peakInformationRate + '\", '\r",
											"        +           '\"peak-burst-size\": \"' + peakBurstSize + '\"'\r",
											"        +       ' }'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"        let subStringToBeReplaced = \"{uuid}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + uuid + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"        let subStringToBeReplaced = \"{localId}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + localId + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"    let subStringToBeReplaced = \"{mountName}\";\r",
											"    let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"    let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"    let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"    path = precedingSubString + mountName + subsequentSubString;\r",
											"    return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i=0; i<serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for (let i=0; i<collectionInputList.length; i++) {\r",
											"            if (collectionInputList[i].collectionName == searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "policing-profile-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var modifiedConfiguration;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    modifiedConfiguration = pm.collectionVariables.get(\"modifiedConfiguration\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var readConfiguration = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            readConfiguration = responseObject[\"policing-profile-1-0:policing-profile-configuration\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"Created PolicingProfile could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: Created PolicingProfile could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: Created PolicingProfile could be loaded, \" + responseCode + \" instead of 200\")\r",
											"        };\r",
											"\r",
											"        logger.debug(\"externalLabel: \"\r",
											"                            + modifiedConfiguration.externalLabel\r",
											"                            + \" / \" + readConfiguration[\"external-label\"]);\r",
											"        logger.debug(\"markerMode: \"\r",
											"                            + modifiedConfiguration.markerMode\r",
											"                            + \" / \" + readConfiguration[\"marker-mode\"]);\r",
											"        logger.debug(\"policerKind: \"\r",
											"                            + modifiedConfiguration.policerKind\r",
											"                            + \" / \" + readConfiguration[\"policer-kind\"]);\r",
											"        logger.debug(\"committedInformationRate: \"\r",
											"                            + modifiedConfiguration.committedInformationRate\r",
											"                            + \" / \" + readConfiguration[\"committed-information-rate\"]);\r",
											"        logger.debug(\"committedBurstSize: \"\r",
											"                            + modifiedConfiguration.committedBurstSize\r",
											"                            + \" / \" + readConfiguration[\"committed-burst-size\"]);\r",
											"        logger.debug(\"excessBurstSize: \"\r",
											"                            + modifiedConfiguration.excessBurstSize\r",
											"                            + \" / \" + readConfiguration[\"excess-burst-size\"]);\r",
											"        logger.debug(\"peakInformationRate: \"\r",
											"                            + modifiedConfiguration.peakInformationRate\r",
											"                            + \" / \" + readConfiguration[\"peak-information-rate\"]);\r",
											"        logger.debug(\"peakBurstSize: \"\r",
											"                            + modifiedConfiguration.peakBurstSize\r",
											"                            + \" / \" + readConfiguration[\"peak-burst-size\"]);\r",
											"        let createdIsIdenticalWithRead = false;\r",
											"        if ( (Object.keys(modifiedConfiguration).length!=0) && (Object.keys(readConfiguration).length!=0) ) {\r",
											"            if ( Object.keys(modifiedConfiguration).length == Object.keys(readConfiguration).length ) {\r",
											"                if ( ( (modifiedConfiguration.externalLabel == readConfiguration[\"external-label\"])\r",
											"                                || (readConfiguration[\"external-label\"]==\"External label not yet defined.\") )\r",
											"                        && ( (modifiedConfiguration.markerMode==readConfiguration[\"marker-mode\"])\r",
											"                                || (readConfiguration[\"marker-mode\"]==\"policing-profile-1-0:MARKER_MODE_TYPE_NOT_YET_DEFINED\") )\r",
											"                        && ( (modifiedConfiguration.policerKind==readConfiguration[\"policer-kind\"])\r",
											"                                || (readConfiguration[\"policer-kind\"]==\"policing-profile-1-0:POLICER_KIND_TYPE_NOT_YET_DEFINED\") )\r",
											"                        && ( (parseInt(modifiedConfiguration.committedInformationRate)==readConfiguration[\"committed-information-rate\"])\r",
											"                                || (readConfiguration[\"committed-information-rate\"]==\"-1\") )\r",
											"                        && ( (parseInt(modifiedConfiguration.committedBurstSize)==readConfiguration[\"committed-burst-size\"])\r",
											"                                || (readConfiguration[\"committed-burst-size\"]==\"-1\") )\r",
											"                        && ( (parseInt(modifiedConfiguration.excessBurstSize)==readConfiguration[\"excess-burst-size\"])\r",
											"                                || (readConfiguration[\"excess-burst-size\"]==\"-1\") )\r",
											"                        && ( (parseInt(modifiedConfiguration.peakInformationRate)==readConfiguration[\"peak-information-rate\"])\r",
											"                                || (readConfiguration[\"peak-information-rate\"]==\"-1\") )\r",
											"                        && ( (parseInt(modifiedConfiguration.peakBurstSize)==readConfiguration[\"peak-burst-size\"])\r",
											"                                || (readConfiguration[\"peak-burst-size\"]==\"-1\") ) ) {\r",
											"                    createdIsIdenticalWithRead = true\r",
											"                } else {\r",
											"                    createdIsIdenticalWithRead = false\r",
											"                }\r",
											"            }\r",
											"        };\r",
											"        pm.test(\"New PolicingProfile has the correct values\", function () {\r",
											"            pm.expect(createdIsIdenticalWithRead).to.be.true\r",
											"        });\r",
											"        if ( createdIsIdenticalWithRead == true ) {\r",
											"            logger.log(\"  - ok: New PolicingProfile has the correct values\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: New PolicingProfile does not have the correct values\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== PolicingProfileConfiguration ========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdPolicingProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfile\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdPolicingProfileUuid = pm.collectionVariables.get(\"createdPolicingProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    let uuid = \"\";\r",
											"    resourcePath = \"/profile-collection/profile={uuid}/policing-profile-1-0:policing-profile-pac/policing-profile-configuration\";\r",
											"    if ((createdPolicingProfileUuid != \"\") && (createdPolicingProfileUuid != undefined)) {\r",
											"        uuid = createdPolicingProfileUuid;\r",
											"        if ( collectionInfo.serverToBeApplied.includes(\"simulator\") ) uuid+=\"b\"\r",
											"    };\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ((mountName != \"\") && (createdPolicingProfileUuid != \"\") && (createdPolicingProfileUuid != undefined)) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ((uuid != undefined) && (uuid != null) && (uuid != \"\")) {\r",
											"        let subStringToBeReplaced = \"{uuid}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + uuid + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ((localId != undefined) && (localId != null) && (localId != \"\")) {\r",
											"        let subStringToBeReplaced = \"{localId}\";\r",
											"        let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"        let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"        let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"        let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"        path = precedingSubString + localId + subsequentSubString;\r",
											"        return path\r",
											"    } else {\r",
											"        return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"    let subStringToBeReplaced = \"{mountName}\";\r",
											"    let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"    let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"    let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"    let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"    path = precedingSubString + mountName + subsequentSubString;\r",
											"    return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for (let i = 0; i < collectionInputList.length; i++) {\r",
											"            if (collectionInputList[i].collectionName == searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-policing-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code)\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"DeletePolicingProfile RPC responded 204\", function () {\r",
											"            pm.expect(responseCode).to.equal(204)\r",
											"        });\r",
											"        if ( responseCode == 204 ) {\r",
											"            logger.log(\"  - ok: DeletePolicingProfile RPC responded 204\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: DeletePolicingProfile RPC responded \" + responseCode + \" instead of 204\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== DeletePolicingProfile ===============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var createdPolicingProfileUuid = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"PolicingProfileRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    createdPolicingProfileUuid = pm.collectionVariables.get(\"createdPolicingProfileUuid\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/policing-profile-1-0:delete-policing-profile\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    let aNewInstanceCouldBeCreated = false;\r",
											"    aNewInstanceCouldBeCreated = (createdPolicingProfileUuid!=undefined) && (createdPolicingProfileUuid!=\"\");\r",
											"    if ( (mountName!=\"\") && aNewInstanceCouldBeCreated ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"obsolete-policing-profile\": \"' + createdPolicingProfileUuid + '\" '\r",
											"        +       '} '\r",
											"        +   '}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}